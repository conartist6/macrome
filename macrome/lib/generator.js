'use strict';

const fs = require('fs');
const { relative, dirname } = require('path');

const { Matchable } = require('./matchable');

const commentLines = [
  'This file is autogenerated. Please do not edit it directly.',
  'When editing run `npx macrome watch` then change the file this is generated from.',
];

class Generator extends Matchable {
  constructor(api, options) {
    super();
    this._api = api;
    this.options = options;
    if (!this.options.parser) {
      throw new Error('Generator instantiated without options.parser');
    }
  }

  get api() {
    return this._api;
  }

  get parser() {
    return this.options.parser;
  }

  get logger() {
    return this.api.logger;
  }

  get generatedPaths() {
    return this.api.generatedPaths;
  }

  resolve(path) {
    return this.api.resolve(path);
  }

  read(path) {
    return fs.readFileSync(this.api.resolve(path), 'utf8');
  }

  parse(content) {
    return this.parser.parse(content);
  }

  print(ast) {
    return this.parser.print(ast);
  }

  generateError(e) {
    return this.parser.generateError(e);
  }

  write(path, content) {
    this.api.write(path, content);
  }

  unlink(path) {
    this.api.unlink(path);
  }

  decorate(ast, annotations) {
    this.parser.stripHeader(ast);
    this.parser.prependHeader(ast, annotations, commentLines);
  }

  getAnnotations(destPath, sourcePath = null) {
    let fromAnnotations = {};

    if (sourcePath) {
      const relPath = relative(dirname(destPath), sourcePath);
      fromAnnotations = {
        'generated-from': relPath.startsWith('.') ? relPath : `./${relPath}`,
      };
    }

    return {
      macrome: true,
      ...fromAnnotations,
      'generated-by': this.options.vcsPath,
    };
  }
}

module.exports = { Generator };
